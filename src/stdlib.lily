# ====================== print functions =================================

# printl (print a list)
def printl(a:list) -> list:
    if (len(a) == 0):
        printd('[')
        print(']')
        return a
    else:
        printd('[')
        let i:int = 0
        for(i + 1 < len(a), i++):
            printd(a[i])
            printd(',', ' ')
        printd(a[len(a) - 1])
        print(']')
        return a

def print(a:list) -> list:
    printl(a)
    return a

# printb (print a boolean)
def printb(a : bool) -> bool:
    if (a == true):
        printd('t', 'r', 'u', 'e')
    else:
        printd('f', 'a', 'l', 's', 'e')
    print(' ')
    return a

def print(a: bool) -> bool:
    printb(a)
    return a

# =================== low-level manipulation functions (may never need called directly from userspace) ================

def setsize(l:list, new_size:int) -> list:
    let true_size: int = truelen(l)
    if (new_size > true_size):
        printd('e', 'r', 'r', 'o')
        print('r')
        return l

    l.setsizei(new_size)
    return l

def resize_list_new(l::int, new_length: int) -> int list:
    let old_length: int = len(l)
    let newl::int =  new int[(old_length * 2) + 1]
    let i: int = 0
    for(i < old_length, i++):
        newl[i] = l[i]
    free(l)
    newl.setsize(new_length)
    return newl

def resize_list_new(l::bool, new_length: int) -> bool list:
    let old_length: int = len(l)
    let newl::bool =  new bool[(old_length * 2) + 1]
    let i: int = 0
    for(i < old_length, i++):
        newl[i] = l[i]
    free(l)
    newl.setsize(new_length)
    return newl

def resize_list_new(l::float, new_length: int) -> float list:
    let old_length: int = len(l)
    let newl::float =  new float[(old_length * 2) + 1]
    let i: int = 0
    for(i < old_length, i++):
        newl[i] = l[i]
    free(l)
    newl.setsize(new_length)
    return newl

def resize_list_new(l::char, new_length: int ) -> char list:
    let old_length: int = len(l)
    let newl::char =  new char[(old_length * 2) + 1]
    let i: int = 0
    for(i < old_length, i++):
        newl[i] = l[i]
    free(l)
    newl.setsize(new_length)
    return newl

def resize_list(l:list, new_length: int) -> list:
    let true_length: int = truelen(l)

    if (true_length > new_length):
        l.setsize(new_length)
        return l
    
    return resize_list_new(l, new_length)

def append(l::int, item:int) -> int list:
    let curr_length: int = len(l)
    let new_list::int = resize_list(l, curr_length + 1)
    new_list[curr_length] = item 
    return new_list

def append(l::float, item:float) -> float list:
    let curr_length: int = len(l)
    let new_list::float = resize_list(l, curr_length + 1)
    new_list[curr_length] = item 
    return new_list

def append(l::bool, item:bool) -> bool list:
    let curr_length: int = len(l)
    let new_list::bool = resize_list(l, curr_length + 1)
    new_list[curr_length] = item 
    return new_list

def append(l::char, item:char) -> char list:
    let curr_length: int = len(l)
    let new_list::char = resize_list(l, curr_length + 1)
    new_list[curr_length] = item 
    return new_list

def pop(l::int) -> int:
    let curr_length: int = len(l)
    if (curr_length == 0):
        return 0
    let res: int = l[curr_length - 1]
    resize_list(l, curr_length - 1)
    return res

def pop(l::bool) -> bool:
    let curr_length: int = len(l)
    if (curr_length == 0):
        return false
    let res: bool = l[curr_length - 1]
    resize_list(l, curr_length - 1)
    return res

def pop(l::char) -> char:
    let curr_length: int = len(l)
    if (curr_length == 0):
        return 'a'
    let res: char = l[curr_length - 1]
    resize_list(l, curr_length - 1)
    return res

def pop(l::float) -> float:
    let curr_length: int = len(l)
    if (curr_length == 0):
        return 0.0
    let res: float = l[curr_length - 1]
    resize_list(l, curr_length - 1)
    return res

def copy(l::int) -> int list:
    let length: int = len(l)
    let newl::int =  new int[length]
    let i: int = 0
    for(i < length, i++):
        newl[i] = l[i]
    return newl

def copy(l::float) -> float list:
    let length: int = len(l)
    let newl::float =  new float[length]
    let i: int = 0
    for(i < length, i++):
        newl[i] = l[i]
    return newl

def copy(l::bool) -> bool list:
    let length: int = len(l)
    let newl::bool =  new bool[length]
    let i: int = 0
    for(i < length, i++):
        newl[i] = l[i]
    return newl

def copy(l::char) -> char list:
    let length: int = len(l)
    let newl::char =  new char[length]
    let i: int = 0
    for(i < length, i++):
        newl[i] = l[i]
    return newl

# ==================== list functions ======================================

# len() is built in

def sum(l::int) -> int:
    let sum:int = 0
    for num in l:
        sum = sum + num
    return sum

def sum(l::float) -> float:
    let sum:float = 0.0
    for num in l:
        sum = sum + num
    return sum

def min(a:int, b:int) -> int:
    if (a < b):
        return a
    else:
        return b

def min(a:float, b:float) -> float:
    if (a < b):
        return a
    else:
        return b

def max(a:int, b:int) -> int:
    if (a < b):
        return a
    else:
        return b

def max(a:float, b:float) -> float:
    if (a < b):
        return a
    else:
        return b


def min(l::int) -> int:
    if (len(l) == 0):
        return 0

    let min:int = l[0]
    for num in l:
        if (num < min):
            min = num
    return min

def min(l::float) -> float:
    if (len(l) == 0):
        return 0.0

    let min:float = l[0]
    for num in l:
        if (num < min):
            min = num
    return min

def max(l::int) -> int:
    if (len(l) == 0):
        return 0

    let max:int = l[0]
    for num in l:
        if (num > max):
            max = num
    return max

def max(l::float) -> float:
    if (len(l) == 0):
        return 0.0

    let max:float = l[0]
    for num in l:
        if (num > max):
            max = num
    return max

let seed:int = 123456789
def random(a:int, b:int) -> int:
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return (a + (seed % ((b - a) + 1)))

def range(start:int, end:int) -> int list:
    let result::int = []
    let i:int = start
    while (i < end):
        result.append(i)
        i = i + 1
    return result

def remove(l::int, item:int) -> int list:
    let new_list::int = []
    for num in l:
        if (num != item):
            new_list.append(num)
    free(l)
    return new_list

def remove(l::bool, item:bool) -> bool list:
    let new_list::bool = []
    for num in l:
        if (num != item):
            new_list.append(num)
    free(l)
    return new_list

def remove(l::float, item:float) -> float list:
    let new_list::float = []
    for num in l:
        if (num != item):
            new_list.append(num)
    free(l)
    return new_list

def remove(l::char, item:char) -> char list:
    let new_list::char = []
    for num in l:
        if (num != item):
            new_list.append(num)
    free(l)
    return new_list


def reverse(l::int) -> int list:
    let length:int = len(l)
    let new_list::int = []
    let i:int = 0
    while (i < length):
        new_list.append(l[length - i - 1])
        i = i + 1
    free(l)
    return new_list

def reverse(l::bool) -> bool list:
    let length:int = len(l)
    let new_list::bool = []
    let i:int = 0
    while (i < length):
        new_list.append(l[length - i - 1])
        i = i + 1
    free(l)
    return new_list

def reverse(l::float) -> float list:
    let length:int = len(l)
    let new_list::float = []
    let i:int = 0
    while (i < length):
        new_list.append(l[length - i - 1])
        i = i + 1
    free(l)
    return new_list

def reverse(l::char) -> char list:
    let length:int = len(l)
    let new_list::char = []
    let i:int = 0
    while (i < length):
        new_list.append(l[length - i - 1])
        i = i + 1
    free(l)
    return new_list

def concatenate(a::int, b::int) -> int list:
    let result::int = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    return result

def concatenate(a::int, b::int, c::int) -> int list:
    let result::int = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    for num in c:
        result.append(num)
    return result

def concatenate(a::bool, b::bool) -> bool list:
    let result::bool = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    return result

def concatenate(a::bool, b::bool, c::bool) -> bool list:
    let result::bool = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    for num in c:
        result.append(num)
    return result

def concatenate(a::float, b::float) -> float list:
    let result::float = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    return result

def concatenate(a::float, b::float, c::float) -> float list:
    let result::float = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    for num in c:
        result.append(num)
    return result

def concatenate(a::char, b::char) -> char list:
    let result::char = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    return result

def concatenate(a::char, b::char, c::char) -> char list:
    let result::char = []
    for num in a:
        result.append(num)
    for num in b:
        result.append(num)
    for num in c:
        result.append(num)
    return result

def sublist(l::int, start:int, end:int) -> int list:
    let new_list::int = []
    let i:int = start
    while (i < end):
        new_list.append(l[i])
        i = i + 1
    return new_list

def sublist(l::bool, start:int, end:int) -> bool list:
    let new_list::bool = []
    let i:int = start
    while (i < end):
        new_list.append(l[i])
        i = i + 1
    return new_list

def sublist(l::float, start:int, end:int) -> float list:
    let new_list::float = []
    let i:int = start
    while (i < end):
        new_list.append(l[i])
        i = i + 1
    return new_list

def sublist(l::char, start:int, end:int) -> char list:
    let new_list::char = []
    let i:int = start
    while (i < end):
        new_list.append(l[i])
        i = i + 1
    return new_list

# ==================== sorting functions ======================================


def merge(a::int, l:int, m:int, r:int) -> int list: 
    let n1:int = m - l + 1
    let n2:int = r - m 
    let L::int = new int[n1]
    let R::int = new int[n2]

    let i:int = 0
    for (i < n1, i++): 
        L[i] = a[l + i] 
    i = 0
    for (i < n2, i++):  
        R[i] = a[m + i + 1] 
 
    i = 0
    let j:int = 0
    let k:int = l
    #i, j, k = 0, 0, l 
    while ( i < n1 and j < n2): 
        if (L[i] <= R[j]): 
            a[k] = L[i] 
            i++
        else: 
            a[k] = R[j] 
            j++
        k++
 
    while (i < n1): 
        a[k] = L[i] 
        i++
        k++
 
    while (j < n2): 
        a[k] = R[j] 
        j++
        k++
    
    return a

def merge(a::bool, l:int, m:int, r:int) -> bool list: 
    let n1:int = m - l + 1
    let n2:int = r - m 
    let L::bool = new bool[n1]
    let R::bool = new bool[n2]

    let i:int = 0
    for (i < n1, i++): 
        L[i] = a[l + i] 
    i = 0
    for (i < n2, i++):  
        R[i] = a[m + i + 1] 
 
    i = 0
    let j:int = 0
    let k:int = l
    #i, j, k = 0, 0, l 
    while ( i < n1 and j < n2): 
        if (L[i] <= R[j]): 
            a[k] = L[i] 
            i++
        else: 
            a[k] = R[j] 
            j++
        k++
 
    while (i < n1): 
        a[k] = L[i] 
        i++
        k++
 
    while (j < n2): 
        a[k] = R[j] 
        j++
        k++
    
    return a

def merge(a::float, l:int, m:int, r:int) -> float list: 
    let n1:int = m - l + 1
    let n2:int = r - m 
    let L::float = new float[n1]
    let R::float = new float[n2]

    let i:int = 0
    for (i < n1, i++): 
        L[i] = a[l + i] 
    i = 0
    for (i < n2, i++):  
        R[i] = a[m + i + 1] 
 
    i = 0
    let j:int = 0
    let k:int = l
    #i, j, k = 0, 0, l 
    while ( i < n1 and j < n2): 
        if (L[i] <= R[j]): 
            a[k] = L[i] 
            i++
        else: 
            a[k] = R[j] 
            j++
        k++
 
    while (i < n1): 
        a[k] = L[i] 
        i++
        k++
 
    while (j < n2): 
        a[k] = R[j] 
        j++
        k++
    
    return a

def merge(a::char, l:int, m:int, r:int) -> char list: 
    let n1:int = m - l + 1
    let n2:int = r - m 
    let L::char = new char[n1]
    let R::char = new char[n2]

    let i:int = 0
    for (i < n1, i++): 
        L[i] = a[l + i] 
    i = 0
    for (i < n2, i++):  
        R[i] = a[m + i + 1] 
 
    i = 0
    let j:int = 0
    let k:int = l
    #i, j, k = 0, 0, l 
    while ( i < n1 and j < n2): 
        if (L[i] <= R[j]): 
            a[k] = L[i] 
            i++
        else: 
            a[k] = R[j] 
            j++
        k++
 
    while (i < n1): 
        a[k] = L[i] 
        i++
        k++
 
    while (j < n2): 
        a[k] = R[j] 
        j++
        k++
    
    return a
 
def mergesort(a:list) -> list:
    let width:int = 1   
    let n:int = len(a)                                          

    while (width < n):
        let l: int = 0
        while (l < n): 
            let r: int = min(l+(width*2-1), n-1)         
            let m: int = min(l+width-1,n-1)
             
            a = merge(a, l, m, r)
            l = l + width*2
        width = width * 2
    return a

def selectionsort(l::int) -> int list:
    let length:int = len(l)
    let i:int = 0
    for (i < length, i++):
        let min_idx:int = i
        let j: int = i + 1
        for (j < length, j++):
            if (l[j] < l[min_idx]):
                min_idx = j
        let temp:int = l[i]
        l[i] = l[min_idx]
        l[min_idx] = temp
    return l

def selectionsort(l::float) -> float list:
    let length:int = len(l)
    let i:int = 0
    for (i < length, i++):
        let min_idx:int = i
        let j: int = i + 1
        for (j < length, j++):
            if (l[j] < l[min_idx]):
                min_idx = j
        let temp:float = l[i]
        l[i] = l[min_idx]
        l[min_idx] = temp
    return l

def selectionsort(l::char) -> char list:
    let length:int = len(l)
    let i:int = 0
    for (i < length, i++):
        let min_idx:int = i
        let j: int = i + 1
        for (j < length, j++):
            if (l[j] < l[min_idx]):
                min_idx = j
        let temp:char = l[i]
        l[i] = l[min_idx]
        l[min_idx] = temp
    return l

def selectionsort(l::bool) -> bool list:
    let length:int = len(l)
    let i:int = 0
    for (i < length, i++):
        let min_idx:int = i
        let j: int = i + 1
        for (j < length, j++):
            if (l[j] < l[min_idx]):
                min_idx = j
        let temp:bool = l[i]
        l[i] = l[min_idx]
        l[min_idx] = temp
    return l

#def partition(arr::int, l:int, h:int) -> int: 
#    let i: int = ( l - 1 ) 
#    let x:int = arr[h] 
#  
#    let j: int = l
#    for (j < h, j++): 
#        if (arr[j] <= x): 
#            i = i + 1
#            let temp: int = arr[i]
#            arr[i] = arr[j]
#            arr[j] = temp
#
#    let temp: int = arr[i + 1]
#    arr[i + 1] = arr[h]
#    arr[h] = temp
#    return (i + 1) 
  
#def quicksortiterative(arr::int, l:int, h:int) -> int list: 
#  
#    # Create an auxiliary stack 
#    let size: int = h - l + 1
#   let stack::int = new int[size]
#  
#    let top: int = -1
#  
#    # push initial values of l and h to stack 
#    top = top + 1
#    stack[top] = l 
#    top = top + 1
#    stack[top] = h 
#  
#    # Keep popping from stack while is not empty 
#    while(top >= 0): 
#        h = stack[top] 
#        top = top - 1
#        l = stack[top] 
#        top = top - 1
#  
#        let p: int = partition( arr, l, h ) 
#  
#        if (p-1 > l): 
#            top = top + 1
#            stack[top] = l 
#            top = top + 1
#            stack[top] = p - 1
#  
#        if (p + 1 < h): 
#            top = top + 1
#            stack[top] = p + 1
#            top = top + 1
#            stack[top] = h 
#    return arr

#def quicksort(l::int) -> int list:
#    let length: int = len(l)
#    l.quicksortiterative(0, length)
#    return l

# ==================== search functions ======================================

def search(l::int, item:int) -> bool:
    for v in l:
        if(v == item):
            return true
    return false

def search(l::bool, item:bool) -> bool:
    for v in l:
        if(v == item):
            return true
    return false

def search(l::char, item:char) -> bool:
    for v in l:
        if(v == item):
            return true
    return false

def search(l::float, item:float) -> bool:
    for v in l:
        if(v == item):
            return true
    return false

def binarysearch(l::int, item:int) -> bool:
    let low:int = 0
    let high:int = len(l) - 1
    while (low <= high):
        let mid:int = (low + high) / 2
        if (l[mid] < item):
            low = mid + 1
        else:
            if (l[mid] > item):
                high = mid - 1
            else:
                return true
    return false

def binarysearch(l::bool, item:bool) -> bool:
    let low:int = 0
    let high:int = len(l) - 1
    while (low <= high):
        let mid:int = (low + high) / 2
        if (l[mid] < item):
            low = mid + 1
        else:
            if (l[mid] > item):
                high = mid - 1
            else:
                return true
    return false

def binarysearch(l::char, item:char) -> bool:
    let low:int = 0
    let high:int = len(l) - 1
    while (low <= high):
        let mid:int = (low + high) / 2
        if (l[mid] < item):
            low = mid + 1
        else:
            if (l[mid] > item):
                high = mid - 1
            else:
                return true
    return false

def binarysearch(l::float, item:float) -> bool:
    let low:int = 0
    let high:int = len(l) - 1
    while (low <= high):
        let mid:int = (low + high) / 2
        if (l[mid] < item):
            low = mid + 1
        else:
            if (l[mid] > item):
                high = mid - 1
            else:
                return true
    return false

# ==================== multi-list operations ======================================

def shuffle(list1::int, list2::int) -> int list:
    let combined_list::int = []
    let length1:int = len(list1)
    let length2:int = len(list2)
    let i:int = 0
    while (i < length1):
        combined_list.append(list1[i])
        i = i + 1
    i = 0
    while (i < length2):
        combined_list.append(list2[i])
        i = i + 1
    let length:int = len(combined_list)
    let j:int = 0
    let temp:int = 0   
    for (i < length, i++):
        j = random(0, length - 1)
        temp = combined_list[i]
        combined_list[i] = combined_list[j]
        combined_list[j] = temp
    return combined_list

def shuffle(list1::bool, list2::bool) -> bool list:
    let combined_list::bool = []
    let length1:int = len(list1)
    let length2:int = len(list2)
    let i:int = 0
    while (i < length1):
        combined_list.append(list1[i])
        i = i + 1
    i = 0
    while (i < length2):
        combined_list.append(list2[i])
        i = i + 1
    let length:int = len(combined_list)
    let j:int = 0
    let temp:bool = false  
    for (i < length, i++):
        j = random(0, length - 1)
        temp = combined_list[i]
        combined_list[i] = combined_list[j]
        combined_list[j] = temp
    return combined_list

def shuffle(list1::char, list2::char) -> char list:
    let combined_list::char = []
    let length1:int = len(list1)
    let length2:int = len(list2)
    let i:int = 0
    while (i < length1):
        combined_list.append(list1[i])
        i = i + 1
    i = 0
    while (i < length2):
        combined_list.append(list2[i])
        i = i + 1
    let length:int = len(combined_list)
    let j:int = 0
    let temp:char = 'a'   
    for (i < length, i++):
        j = random(0, length - 1)
        temp = combined_list[i]
        combined_list[i] = combined_list[j]
        combined_list[j] = temp
    return combined_list

def shuffle(list1::float, list2::float) -> float list:
    let combined_list::float = []
    let length1:int = len(list1)
    let length2:int = len(list2)
    let i:int = 0
    while (i < length1):
        combined_list.append(list1[i])
        i = i + 1
    i = 0
    while (i < length2):
        combined_list.append(list2[i])
        i = i + 1
    let length:int = len(combined_list)
    let j:int = 0
    let temp:float = 0.0
    for (i < length, i++):
        j = random(0, length - 1)
        temp = combined_list[i]
        combined_list[i] = combined_list[j]
        combined_list[j] = temp
    return combined_list