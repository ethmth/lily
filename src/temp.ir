; ModuleID = 'LILY'
source_filename = "LILY"

@"print_return!3" = global i1 false
@"arg_return!3" = global i1 false
@"forlist!!l!0" = global ptr null
@"forvar!!f!0" = global i64 0
@"n!0" = global i1 false
@"a!1" = global ptr null
@"print_return!2" = global i8 0
@"arg3!2" = global i8 0
@"arg2!2" = global i8 0
@"arg1!2" = global i8 0
@"arg_return!2" = global i8 0
@"true_size!0" = global i64 0
@"new_size!0" = global i64 0
@"l!0" = global ptr null
@"print_return!1" = global i8 0
@"arg4!0" = global i8 0
@"arg3!1" = global i8 0
@"arg2!1" = global i8 0
@"arg1!1" = global i8 0
@"arg_return!1" = global i8 0
@"print_return!0" = global i8 0
@"arg3!0" = global i8 0
@"arg2!0" = global i8 0
@"arg1!0" = global i8 0
@"arg_return!0" = global i8 0
@"a!0" = global i1 false
@"malvar!!!0" = global ptr null
@fmt = private unnamed_addr constant [4 x i8] c"%B\0A\00", align 1
@fmt.1 = private unnamed_addr constant [13 x i8] c"%c %c %c %c\0A\00", align 1
@fmt.2 = private unnamed_addr constant [16 x i8] c"%c %c %c %c %c\0A\00", align 1
@fmt.3 = private unnamed_addr constant [13 x i8] c"%c %c %c %c\0A\00", align 1

define i8 @main() {
entry:
  %0 = trunc i64 35 to i32
  %mallocsize = mul i32 %0, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i32)
  %listlitmalloc = tail call ptr @malloc(i32 %mallocsize)
  store ptr %listlitmalloc, ptr @"malvar!!!0", align 8
  store i64 3, ptr %listlitmalloc, align 4
  %listlittyp = getelementptr i8, ptr %listlitmalloc, i8 8
  store i64 3, ptr %listlittyp, align 4
  %listlittyp1 = getelementptr i8, ptr %listlitmalloc, i8 16
  store i64 2, ptr %listlittyp1, align 4
  %listlitbyte = getelementptr i8, ptr %listlitmalloc, i8 24
  store i64 1, ptr %listlitbyte, align 4
  %listlitgep = getelementptr i8, ptr %listlitmalloc, i8 32
  store i1 true, ptr %listlitgep, align 1
  %listlitgep2 = getelementptr i8, ptr %listlitmalloc, i8 33
  store i1 false, ptr %listlitgep2, align 1
  %listlitgep3 = getelementptr i8, ptr %listlitmalloc, i8 34
  store i1 true, ptr %listlitgep3, align 1
  store ptr %listlitmalloc, ptr @"a!1", align 8
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store i64 0, ptr @"forvar!!f!0", align 4
  %"a!1" = load ptr, ptr @"a!1", align 8
  store ptr %"a!1", ptr @"forlist!!l!0", align 8
  br label %while

while:                                            ; preds = %while_body, %then
  %"forvar!!f!0" = load i64, ptr @"forvar!!f!0", align 4
  %"a!14" = load ptr, ptr @"a!1", align 8
  %listlitsizegep = getelementptr i8, ptr %"a!14", i64 0
  %listindexsizeload = load i64, ptr %listlitsizegep, align 4
  %tmp = icmp slt i64 %"forvar!!f!0", %listindexsizeload
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %listindexptr = load ptr, ptr @"forlist!!l!0", align 8
  %listlitsizegep5 = getelementptr i8, ptr %listindexptr, i64 0
  %listindexsizeload6 = load i1, ptr %listlitsizegep5, align 1
  %"forvar!!f!07" = load i64, ptr @"forvar!!f!0", align 4
  %listindexmul = mul i64 1, %"forvar!!f!07"
  %listindexadd = add i64 %listindexmul, 32
  %listlitgep8 = getelementptr i8, ptr %listindexptr, i64 %listindexadd
  %listindexload = load i1, ptr %listlitgep8, align 1
  store i1 %listindexload, ptr @"n!0", align 1
  %"n!0" = load i1, ptr @"n!0", align 1
  %"print!3_result" = call i1 @"print!3"(i1 %"n!0")
  %"forvar!!f!09" = load i64, ptr @"forvar!!f!0", align 4
  %tmp10 = add i64 %"forvar!!f!09", 1
  store i64 %tmp10, ptr @"forvar!!f!0", align 4
  br label %while

while_end:                                        ; preds = %while

else:                                             ; preds = %entry
  br label %if_end

if_end:                                           ; preds = %else
  ret i8 0
}

define i1 @"print!3"(i1 %arg_return) {
entry:
  %arg_return1 = alloca i1, align 1
  store i1 %arg_return, ptr %arg_return1, align 1
  store i1 %arg_return, ptr @"arg_return!3", align 1
  %"arg_return!3" = load i1, ptr @"arg_return!3", align 1
  %printf = call i1 @printf(ptr @fmt, i1 %"arg_return!3")
  store i1 %printf, ptr @"print_return!3", align 1
  %"arg_return!32" = load i1, ptr @"arg_return!3", align 1
  ret i1 %"arg_return!32"
}

define ptr @"setsize!0"(ptr %l, i64 %new_size) {
entry:
  %l1 = alloca ptr, align 8
  store ptr %l, ptr %l1, align 8
  store ptr %l, ptr @"l!0", align 8
  %new_size2 = alloca i64, align 8
  store i64 %new_size, ptr %new_size2, align 4
  store i64 %new_size, ptr @"new_size!0", align 4
  %"l!0" = load ptr, ptr @"l!0", align 8
  %listlitsizegep = getelementptr i8, ptr %"l!0", i64 8
  %listindexsizeload = load i64, ptr %listlitsizegep, align 4
  store i64 %listindexsizeload, ptr @"true_size!0", align 4
  %"new_size!0" = load i64, ptr @"new_size!0", align 4
  %"true_size!0" = load i64, ptr @"true_size!0", align 4
  %tmp = icmp sgt i64 %"new_size!0", %"true_size!0"
  br i1 %tmp, label %then, label %else

then:                                             ; preds = %entry
  %"print!2_result" = call i8 @"print!2"(i8 101, i8 114, i8 114, i8 114)
  %"l!03" = load ptr, ptr @"l!0", align 8
  ret ptr %"l!03"

else:                                             ; preds = %entry
  br label %if_end

if_end:                                           ; preds = %else
  %"l!04" = load ptr, ptr @"l!0", align 8
  %listlitsizegep5 = getelementptr i8, ptr %"l!04", i64 0
  %"new_size!06" = load i64, ptr @"new_size!0", align 4
  store i64 %"new_size!06", ptr %listlitsizegep5, align 4
  store ptr %"l!04", ptr @"l!0", align 8
  %"l!07" = load ptr, ptr @"l!0", align 8
  ret ptr %"l!07"
}

define i8 @"print!2"(i8 %arg_return, i8 %arg1, i8 %arg2, i8 %arg3) {
entry:
  %arg_return1 = alloca i8, align 1
  store i8 %arg_return, ptr %arg_return1, align 1
  store i8 %arg_return, ptr @"arg_return!2", align 1
  %arg12 = alloca i8, align 1
  store i8 %arg1, ptr %arg12, align 1
  store i8 %arg1, ptr @"arg1!2", align 1
  %arg23 = alloca i8, align 1
  store i8 %arg2, ptr %arg23, align 1
  store i8 %arg2, ptr @"arg2!2", align 1
  %arg34 = alloca i8, align 1
  store i8 %arg3, ptr %arg34, align 1
  store i8 %arg3, ptr @"arg3!2", align 1
  %"arg3!2" = load i8, ptr @"arg3!2", align 1
  %"arg2!2" = load i8, ptr @"arg2!2", align 1
  %"arg1!2" = load i8, ptr @"arg1!2", align 1
  %"arg_return!2" = load i8, ptr @"arg_return!2", align 1
  %printf = call i8 @printf(ptr @fmt.1, i8 %"arg_return!2", i8 %"arg1!2", i8 %"arg2!2", i8 %"arg3!2")
  store i8 %printf, ptr @"print_return!2", align 1
  %"arg_return!25" = load i8, ptr @"arg_return!2", align 1
  ret i8 %"arg_return!25"
}

define i1 @"print_bool!0"(i1 %a) {
entry:
  %a1 = alloca i1, align 1
  store i1 %a, ptr %a1, align 1
  store i1 %a, ptr @"a!0", align 1
  %"a!0" = load i1, ptr @"a!0", align 1
  %tmp = icmp eq i1 %"a!0", true
  br i1 %tmp, label %then, label %else

then:                                             ; preds = %entry
  %"print!0_result" = call i8 @"print!0"(i8 116, i8 114, i8 117, i8 101)
  br label %if_end

else:                                             ; preds = %entry
  %"print!1_result" = call i8 @"print!1"(i8 102, i8 97, i8 108, i8 115, i8 101)
  br label %if_end

if_end:                                           ; preds = %else, %then
  %"a!02" = load i1, ptr @"a!0", align 1
  ret i1 %"a!02"
}

define i8 @"print!1"(i8 %arg_return, i8 %arg1, i8 %arg2, i8 %arg3, i8 %arg4) {
entry:
  %arg_return1 = alloca i8, align 1
  store i8 %arg_return, ptr %arg_return1, align 1
  store i8 %arg_return, ptr @"arg_return!1", align 1
  %arg12 = alloca i8, align 1
  store i8 %arg1, ptr %arg12, align 1
  store i8 %arg1, ptr @"arg1!1", align 1
  %arg23 = alloca i8, align 1
  store i8 %arg2, ptr %arg23, align 1
  store i8 %arg2, ptr @"arg2!1", align 1
  %arg34 = alloca i8, align 1
  store i8 %arg3, ptr %arg34, align 1
  store i8 %arg3, ptr @"arg3!1", align 1
  %arg45 = alloca i8, align 1
  store i8 %arg4, ptr %arg45, align 1
  store i8 %arg4, ptr @"arg4!0", align 1
  %"arg4!0" = load i8, ptr @"arg4!0", align 1
  %"arg3!1" = load i8, ptr @"arg3!1", align 1
  %"arg2!1" = load i8, ptr @"arg2!1", align 1
  %"arg1!1" = load i8, ptr @"arg1!1", align 1
  %"arg_return!1" = load i8, ptr @"arg_return!1", align 1
  %printf = call i8 @printf(ptr @fmt.2, i8 %"arg_return!1", i8 %"arg1!1", i8 %"arg2!1", i8 %"arg3!1", i8 %"arg4!0")
  store i8 %printf, ptr @"print_return!1", align 1
  %"arg_return!16" = load i8, ptr @"arg_return!1", align 1
  ret i8 %"arg_return!16"
}

define i8 @"print!0"(i8 %arg_return, i8 %arg1, i8 %arg2, i8 %arg3) {
entry:
  %arg_return1 = alloca i8, align 1
  store i8 %arg_return, ptr %arg_return1, align 1
  store i8 %arg_return, ptr @"arg_return!0", align 1
  %arg12 = alloca i8, align 1
  store i8 %arg1, ptr %arg12, align 1
  store i8 %arg1, ptr @"arg1!0", align 1
  %arg23 = alloca i8, align 1
  store i8 %arg2, ptr %arg23, align 1
  store i8 %arg2, ptr @"arg2!0", align 1
  %arg34 = alloca i8, align 1
  store i8 %arg3, ptr %arg34, align 1
  store i8 %arg3, ptr @"arg3!0", align 1
  %"arg3!0" = load i8, ptr @"arg3!0", align 1
  %"arg2!0" = load i8, ptr @"arg2!0", align 1
  %"arg1!0" = load i8, ptr @"arg1!0", align 1
  %"arg_return!0" = load i8, ptr @"arg_return!0", align 1
  %printf = call i8 @printf(ptr @fmt.3, i8 %"arg_return!0", i8 %"arg1!0", i8 %"arg2!0", i8 %"arg3!0")
  store i8 %printf, ptr @"print_return!0", align 1
  %"arg_return!05" = load i8, ptr @"arg_return!0", align 1
  ret i8 %"arg_return!05"
}

declare noalias ptr @malloc(i32)

declare i1 @printf(ptr, ...)
